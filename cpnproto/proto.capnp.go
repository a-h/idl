// Code generated by capnpc-go. DO NOT EDIT.

package idl

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Person capnp.Struct

// Person_TypeID is the unique identifier for the type Person.
const Person_TypeID = 0xed5bcc458b243f52

func NewPerson(s *capnp.Segment) (Person, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Person(st), err
}

func NewRootPerson(s *capnp.Segment) (Person, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Person(st), err
}

func ReadRootPerson(msg *capnp.Message) (Person, error) {
	root, err := msg.Root()
	return Person(root.Struct()), err
}

func (s Person) String() string {
	str, _ := text.Marshal(0xed5bcc458b243f52, capnp.Struct(s))
	return str
}

func (s Person) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Person) DecodeFromPtr(p capnp.Ptr) Person {
	return Person(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Person) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Person) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Person) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Person) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Person) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Person) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Person) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Person) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Person) Birthdate() (Date, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Date(p.Struct()), err
}

func (s Person) HasBirthdate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Person) SetBirthdate(v Date) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewBirthdate sets the birthdate field to a newly
// allocated Date struct, preferring placement in s's segment.
func (s Person) NewBirthdate() (Date, error) {
	ss, err := NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return Date{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Person) Email() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Person) HasEmail() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Person) EmailBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Person) SetEmail(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Person) Phones() (Person_PhoneNumber_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Person_PhoneNumber_List(p.List()), err
}

func (s Person) HasPhones() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Person) SetPhones(v Person_PhoneNumber_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewPhones sets the phones field to a newly
// allocated Person_PhoneNumber_List, preferring placement in s's segment.
func (s Person) NewPhones(n int32) (Person_PhoneNumber_List, error) {
	l, err := NewPerson_PhoneNumber_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Person_PhoneNumber_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Person_List is a list of Person.
type Person_List = capnp.StructList[Person]

// NewPerson creates a new list of Person.
func NewPerson_List(s *capnp.Segment, sz int32) (Person_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Person](l), err
}

// Person_Future is a wrapper for a Person promised by a client call.
type Person_Future struct{ *capnp.Future }

func (p Person_Future) Struct() (Person, error) {
	s, err := p.Future.Struct()
	return Person(s), err
}

func (p Person_Future) Birthdate() Date_Future {
	return Date_Future{Future: p.Future.Field(3, nil)}
}

type Person_PhoneNumber capnp.Struct

// Person_PhoneNumber_TypeID is the unique identifier for the type Person_PhoneNumber.
const Person_PhoneNumber_TypeID = 0xd68b5724fed51061

func NewPerson_PhoneNumber(s *capnp.Segment) (Person_PhoneNumber, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Person_PhoneNumber(st), err
}

func NewRootPerson_PhoneNumber(s *capnp.Segment) (Person_PhoneNumber, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Person_PhoneNumber(st), err
}

func ReadRootPerson_PhoneNumber(msg *capnp.Message) (Person_PhoneNumber, error) {
	root, err := msg.Root()
	return Person_PhoneNumber(root.Struct()), err
}

func (s Person_PhoneNumber) String() string {
	str, _ := text.Marshal(0xd68b5724fed51061, capnp.Struct(s))
	return str
}

func (s Person_PhoneNumber) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Person_PhoneNumber) DecodeFromPtr(p capnp.Ptr) Person_PhoneNumber {
	return Person_PhoneNumber(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Person_PhoneNumber) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Person_PhoneNumber) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Person_PhoneNumber) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Person_PhoneNumber) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Person_PhoneNumber) Number() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Person_PhoneNumber) HasNumber() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Person_PhoneNumber) NumberBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Person_PhoneNumber) SetNumber(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Person_PhoneNumber) Type() Person_PhoneNumber_Type {
	return Person_PhoneNumber_Type(capnp.Struct(s).Uint16(0))
}

func (s Person_PhoneNumber) SetType(v Person_PhoneNumber_Type) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Person_PhoneNumber_List is a list of Person_PhoneNumber.
type Person_PhoneNumber_List = capnp.StructList[Person_PhoneNumber]

// NewPerson_PhoneNumber creates a new list of Person_PhoneNumber.
func NewPerson_PhoneNumber_List(s *capnp.Segment, sz int32) (Person_PhoneNumber_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Person_PhoneNumber](l), err
}

// Person_PhoneNumber_Future is a wrapper for a Person_PhoneNumber promised by a client call.
type Person_PhoneNumber_Future struct{ *capnp.Future }

func (p Person_PhoneNumber_Future) Struct() (Person_PhoneNumber, error) {
	s, err := p.Future.Struct()
	return Person_PhoneNumber(s), err
}

type Person_PhoneNumber_Type uint16

// Person_PhoneNumber_Type_TypeID is the unique identifier for the type Person_PhoneNumber_Type.
const Person_PhoneNumber_Type_TypeID = 0xe1432335ec44693f

// Values of Person_PhoneNumber_Type.
const (
	Person_PhoneNumber_Type_mobile Person_PhoneNumber_Type = 0
	Person_PhoneNumber_Type_home   Person_PhoneNumber_Type = 1
	Person_PhoneNumber_Type_work   Person_PhoneNumber_Type = 2
)

// String returns the enum's constant name.
func (c Person_PhoneNumber_Type) String() string {
	switch c {
	case Person_PhoneNumber_Type_mobile:
		return "mobile"
	case Person_PhoneNumber_Type_home:
		return "home"
	case Person_PhoneNumber_Type_work:
		return "work"

	default:
		return ""
	}
}

// Person_PhoneNumber_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Person_PhoneNumber_TypeFromString(c string) Person_PhoneNumber_Type {
	switch c {
	case "mobile":
		return Person_PhoneNumber_Type_mobile
	case "home":
		return Person_PhoneNumber_Type_home
	case "work":
		return Person_PhoneNumber_Type_work

	default:
		return 0
	}
}

type Person_PhoneNumber_Type_List = capnp.EnumList[Person_PhoneNumber_Type]

func NewPerson_PhoneNumber_Type_List(s *capnp.Segment, sz int32) (Person_PhoneNumber_Type_List, error) {
	return capnp.NewEnumList[Person_PhoneNumber_Type](s, sz)
}

type Date capnp.Struct

// Date_TypeID is the unique identifier for the type Date.
const Date_TypeID = 0xef29c66fa74a8c93

func NewDate(s *capnp.Segment) (Date, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Date(st), err
}

func NewRootDate(s *capnp.Segment) (Date, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Date(st), err
}

func ReadRootDate(msg *capnp.Message) (Date, error) {
	root, err := msg.Root()
	return Date(root.Struct()), err
}

func (s Date) String() string {
	str, _ := text.Marshal(0xef29c66fa74a8c93, capnp.Struct(s))
	return str
}

func (s Date) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Date) DecodeFromPtr(p capnp.Ptr) Date {
	return Date(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Date) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Date) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Date) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Date) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Date) Year() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Date) SetYear(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Date) Month() uint8 {
	return capnp.Struct(s).Uint8(2)
}

func (s Date) SetMonth(v uint8) {
	capnp.Struct(s).SetUint8(2, v)
}

func (s Date) Day() uint8 {
	return capnp.Struct(s).Uint8(3)
}

func (s Date) SetDay(v uint8) {
	capnp.Struct(s).SetUint8(3, v)
}

// Date_List is a list of Date.
type Date_List = capnp.StructList[Date]

// NewDate creates a new list of Date.
func NewDate_List(s *capnp.Segment, sz int32) (Date_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Date](l), err
}

// Date_Future is a wrapper for a Date promised by a client call.
type Date_Future struct{ *capnp.Future }

func (p Date_Future) Struct() (Date, error) {
	s, err := p.Future.Struct()
	return Date(s), err
}

const schema_dbb9ad1f14bf0b36 = "x\xda\\\x92\xbb\x8b\x13Q\x18\xc5\xcf\xb97\xbb\x11\xcc" +
	":\xb9L\xc4J\"k\x0a7\xb0a}\x16if\xc1" +
	",\xb8\xe2#w\x89X\xa8\xe0\xc4\\H0\xf3`v" +
	"d\x09(X\x8akg\xe7?`%\xd6[Y\xa9\x08" +
	"\xb6+\x88Xle\xe3bo\xe1\xc8\x9d\x98\x07v3" +
	"\x1f\xdf9\xdf\xf9\x9d\x99\xb5\x0a\xd7\x0bg\x97>\x0a\x08" +
	"}ja1\xf3\xcb\xfb\x7fj\xb7w\xbf@\xbbd\xb6" +
	"\xe5\xd5v7>\xdf9\xc4\x02\x8b\x80\xbb\xc9\xdf\xee-" +
	"\x9e\x00\xdc{\xdc\x013o\xd0\xfay\xf1\xf4\xe5\x03\xa8" +
	"\xaa\x98)\xc1\xf3{\\\xa6\xfb)\xd7\xbc\xe7M\xcc\x19" +
	"\xa9\x12\xb3KG\xdfU\xaao\xf6\xbea\xa1`7\xbe" +
	"\xf2\x95{\x90\xbb\x1e\xf2\x07\x98\xbd|q\xf5u\xf4a" +
	"\xe5\x17t\x89s\xcb\xf9\xee\xbex\xee~\x17\xb9J\xbc" +
	"\xc5j\x16'Q\x1a5\x1e\xf8\"\x0e\xe3f\xdb$\xdb" +
	"Q\xd8h\xf7\xa3\xd0x7\x1e\x05]\x93\xe8\x02\xe7c" +
	"\xb2\xeetF\xb1\xd1Gd\x01(\x10P+M@\xd7" +
	"$\xf5\x9a Y\xa1\x9d\xad\xd6\x01}FR_\x10\xf4" +
	"\xc2\xdc\x87%\x08\x96@'\x1d\xc5\x86\xce\xcc\x12\xa4\x03" +
	"Ns\xc8\xffs\x8cc4:\xc5Ql\xda\xa4.Q" +
	"\x00\xead\xd3\x0a\xd5\xf1:@\xa1\x96\xea\x80\x17D\xdd" +
	"\xc1\xd08\xfd(0\xceN\x94<\x9cZrb)\xa3" +
	"0\xc7\x99\x16\xad\xd8\xcd&GP\xb4\xb4\xe5)\x97o" +
	"\x19\xeeJ\xea\xbe\xa0\x12\xff\xc0\xcc9@\xdf\x97\xd4C" +
	"A%E%\xcf2\xb0\x0d\xf4$\xf5SAEY\xa1" +
	"\x04\xd4\x93-@?\x96\xd4\xcf\x04\x9d\xd0\x0f\xcc\xa4\x80" +
	"\xaa\x09\xfc\xc1p\xf2\xe6\xc5\xf6\xfc6\x8f\x81mI\x96" +
	"\xe7\x7f\x02;\xcc\xba\x83$\xed\xf7\xfc\x144,\xcf\xbe" +
	",\xc8\xf2\\k9b\xcbO\x0d\x90w4\xa5\xd8\xb0" +
	"\x14\xeb\x92\xfa\x9a\xcd&\xc6\x14\x9b\x96\xa2%\xa9\xdb\x16" +
	"M\x8e)\xae/\x03\xfa\x8a\xa4\xee\x08:#\xe3'\x94" +
	"\x10\x94`5\x88\xc2\xb4\xcfE\x08.\x82\xc5\x9e?\x9a" +
	"<\xff\x0d\x00\x00\xff\xff\xfd\xab\xb5\x8b"

func init() {
	schemas.Register(schema_dbb9ad1f14bf0b36,
		0xd68b5724fed51061,
		0xe1432335ec44693f,
		0xed5bcc458b243f52,
		0xef29c66fa74a8c93)
}
